/* style.css - @font-face ルール追加版 */

/* カスタムフォント定義 */
@font-face {
  font-family: 'JKMaruGothicM'; /* TextEditor.kt の cssFontFamily と一致 */
  src: url('../../fonts/JK-Maru-Gothic-M.otf'); /* TextEditor.kt の assetFileName と一致 */
}

@font-face {
  font-family: 'KeiFont'; /* TextEditor.kt の cssFontFamily と一致 */
  src: url('../../fonts/keifont.ttf'); /* TextEditor.kt の assetFileName と一致 */
}

@font-face {
  font-family: 'Yosugara'; /* TextEditor.kt の cssFontFamily と一致 */
  src: url('../../fonts/yosugaraver1_2.ttf'); /* TextEditor.kt の assetFileName と一致 */
}

/* 1. 基本的なリセットとページ全体のFlex設定 */
html, body {
    height: 100%; /* ビューポートの高さいっぱいに */
    margin: 0;
    padding: 0;
    font-family: 'Arial', sans-serif; /* 初期フォントをArialに設定 (Arialがなければsans-serif) */
    box-sizing: border-box;
    overflow: hidden; /* ページ全体のスクロールを禁止 */
}

*, *::before, *::after {
    box-sizing: inherit; /* box-sizing をすべての要素に継承 */
}

body {
    display: flex; /* body をFlexコンテナに */
    /* .page-container が body の唯一の子であると想定し、高さを100%にする */
}

/* 2. メインコンテナ (.page-container) */
.page-container {
    display: flex;
    flex-direction: column; /* 子要素 (.canvasWrapper, .inputArea) を縦に並べる */
    width: 100%;  /* 親(body)の幅いっぱいに */
    height: 100%; /* 親(body)の高さいっぱいに */
    padding: 8px; /* コンテナの内側に余白 */
    /*border: 2px solid blue; /* 範囲確認用 */
    overflow: hidden; /* コンテナからはみ出す内容は隠す */
}

/* 3. キャンバスラッパー (.canvasWrapper) */
.canvasWrapper {
    /* 高さ: canvasのHTML属性 height="128" を基準に、
       ボーダーや必要な余白を考慮して設定。
       ここでは仮に 150px とし、canvasが内部に収まるようにする。
       280px で安定していたなら、それでもOK。ただし、その場合 canvas の height:100% がどう影響するか注意 */
    height: 150px; /* ★★★ canvasの高さ(128px) + 上下ボーダー/パディング分を考慮した値に調整 ★★★ */
                   /* または、検証で安定した 280px を使用 */
    flex-shrink: 0; /* 高さが縮まないようにする */
    margin-top: 10px;
    margin-bottom: 8px; /*下の .inputArea との間隔 */

    display: flex;
    justify-content: center; /* canvas を水平中央に */
    align-items: flex-start; /* canvas を垂直上端に */

    /*border: 2px solid red; /* 範囲確認用 */
    /* padding: 0; */ /* canvasのマージンで制御するため、ラッパーのpaddingは0でも良い */
                      /* もしラッパーにpaddingが必要なら、canvasのサイズ計算に影響 */
}

/* 4. キャンバス本体 (#previewCanvas) */
canvas#previewCanvas {
    /* HTML属性の width="296" height="128" を尊重する */
    /* CSSで表示サイズを制御する場合は、アスペクト比に注意 */
    max-width: 100%;  /* 親(.canvasWrapper)の幅を超えないように */
    /* max-height: 100%; */ /* 親(.canvasWrapper)の高さを超えないようにする場合 */
                           /* ただし、height:150px (canvasWrapper) に対して canvas height=128 なので、
                              height:auto や height:128px の方が自然かもしれない */
    height: 128px; /* HTML属性と合わせるか、auto */
    width: auto;   /* heightを基準にアスペクト比を保つ */

    margin: 0;
    margin-top: 10px;
    padding: 0;       /* 念のため */
    border: 1px solid black; /* 範囲確認用 */
    display: block;   /* display:block は安定のため良い */
}

/* 5. 入力エリアコンテナ (.inputArea) */
.inputArea {
    flex-grow: 1;
    min-height: 0;
    /* max-height: 200px; */ /* 必要に応じて */
    display: flex;
    flex-direction: row; /* 子要素を横に並べるのは維持 */
    justify-content: center; /* 水平方向は中央揃えを維持 */
    align-items: flex-start; /* ★★★ 子要素のグループを垂直上端に配置 ★★★ */
    /* border: 2px solid orange;*/
    padding: 8px;
    overflow: hidden;
    background-color: white;
}

/* 6. テキスト入力エリア (#textInput) */
#textInput {
    width: 148px;
    height: 64px;
    margin-right: 8px;
    padding: 5px;
    border: 1px solid purple;
    resize: none;
    overflow-y: auto;
    /* 初期フォントはbodyから継承されるが、個別に指定も可能 */
    /* font-family: 'Arial', sans-serif; */
}

/* 7. ボタンラッパー (.buttonsWrapper) */
.buttonsWrapper {
    flex-shrink: 0; /* 幅が縮まないように */
    width: 60px; /* 固定幅 */
    display: flex;
    flex-direction: column;
    align-items: center; /* ボタンを中央に (任意) */
    /*border: 1px solid teal; /* 範囲確認用 */
}

.buttonsWrapper button {
    width: 100%; /* 親(.buttonsWrapper)の幅いっぱいに */
    padding: 5px 0;
    margin-bottom: 5px;
    font-size: 0.9em;
}

button#clearTextButton {
    /* 上記のスタイルを継承 */
}
